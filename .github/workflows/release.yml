name: Release

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Version bump (patch, minor, major)"
        required: true
        default: "patch"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }
      - name: Read current version
        id: cur
        run: |
          CUR=$(tr -d '\n' < VERSION)
          echo "current=$CUR" >> $GITHUB_OUTPUT
      - name: Compute next version
        id: next
        run: |
          BUMP=${{ github.event.inputs.bump }}
          CUR=${{ steps.cur.outputs.current }}
          MAJOR=$(echo $CUR | cut -d. -f1)
            MINOR=$(echo $CUR | cut -d. -f2)
            PATCH=$(echo $CUR | cut -d. -f3)
          case "$BUMP" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
            *) echo "Unsupported bump: $BUMP"; exit 1 ;;
          esac
          NEXT="${MAJOR}.${MINOR}.${PATCH}"
          echo "next=$NEXT" >> $GITHUB_OUTPUT
      - name: Update VERSION & lakefile
        run: |
          NEXT=${{ steps.next.outputs.next }}
          echo "$NEXT" > VERSION
          sed -i -E "s/version := v!\"[0-9]+\.[0-9]+\.[0-9]+.*\"/version := v!\"${NEXT}\"/" lakefile.lean
      - name: Install Lean toolchain
        run: |
          curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh -s -- -y --default-toolchain $(cat lean-toolchain)
          echo "$HOME/.elan/bin" >> $GITHUB_PATH
      - name: Build (sanity check)
        run: |
          lake build
      - name: Commit, tag & push
        run: |
          NEXT=${{ steps.next.outputs.next }}
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add VERSION lakefile.lean
          git commit -m "chore: bump version to ${NEXT}" || echo "No content changes"
          if git rev-parse v${NEXT} >/dev/null 2>&1; then
            echo "Tag v${NEXT} already exists"
          else
            git tag -a v${NEXT} -m "Release v${NEXT}"
          fi
          git push origin HEAD:main
          git push origin v${NEXT}
      - name: Pack source tarball
        run: |
          VER=${{ steps.next.outputs.next }}
          mkdir -p dist
          tar -czf dist/websocket-lean-${VER}-src.tgz \
            README.md LICENSE lakefile.lean lean-toolchain WebSocket
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.next.outputs.next }}
          name: WebSocket Lean ${{ steps.next.outputs.next }}
          files: dist/*.tgz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
